#include <stdio.h>
#include <stdlib.h>
#include <string.h>      /* for fgets */
#include <strings.h>     /* for bzero, bcopy */
#include <unistd.h>      /* for read, write */
#include <sys/socket.h>  /* for socket use */
#include <netdb.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <signal.h>


#define MAXLINE  8192  /* max text line length */
#define MAXBUF   8192  /* max I/O buffer size */
#define LISTENQ  1024  /* second argument to listen() */

/* 
 * open_listenfd - open and return a listening socket on port
 * Returns -1 in case of failure 
 */
int open_listenfd(int port);

void sighandler(int); // https://www.tutorialspoint.com/c_standard_library/c_function_signal.htm

static volatile int run = 1;
int main (int argc, char **argv) {
   int listenfd, *connfdp, port, clientlen=sizeof(struct sockaddr_in);
   struct sockaddr_in clientaddr;
   pthread_t tid; 

   signal(SIGINT, sighandler);
   
   if (argc != 2) {
	fprintf(stderr, "usage: %s <port>\n", argv[0]);
	exit(0);
   }
   port = atoi(argv[1]);
   listenfd = open_listenfd(port);
   while(run) {
      //printf("Going to sleep for a second...\n");
      //sleep(1);
      connfdp = malloc(sizeof(int));

	   if ((*connfdp = accept(listenfd, (struct sockaddr*)&clientaddr, &clientlen) > 0)) { 
	    pthread_create(&tid, NULL, thread, connfdp);
       }
       else {
           perror("accept failed");
           return 1;
       }
   }
   return(0);
}

void * thread(void * vargp) 
{  
    int connfd = *((int *)vargp);
    pthread_detach(pthread_self()); 
    free(vargp);
    echo(connfd);
    close(connfd);
    return NULL;
}


void sighandler(int signum) {
   
   printf("Caught interupt signal, closing server now");
   run = 0;
   exit(1);
}

void echo (int connfd) {
    char error400msg[] = "%s 400 Bad Request\r\nContent-Type:text/plain\r\nContent-Length:0\r\n\r\n";
    char error403msg[] = "%s 403 Forbidden\r\nContent-Type:text/plain\r\nContent-Length:0\r\n\r\n";
    char error404msg[] = "%s 404 Not Found\r\nContent-Type:text/plain\r\nContent-Length:0\r\n\r\n";
    char error405msg[] = "%s 405 Method Not Allowed\r\nContent-Type:text/plain\r\nContent-Length:0\r\n\r\n";
    char error505msg[] = "HTTP/1.1 505 HTTP Version Not Supported\r\nContent-Type:text/plain\r\nContent-Length:0\r\n\r\n";
    char sendBuf[MAXBUF];
    char receiveBuf[MAXBUF];
    FILE *file;
    size_t bytesRead;
    long fSize;
    char *tokptr;
    char *method;
    char *version;
    char *uri;
    char *type;
    char *wwwPath;

	bzero(receiveBuf, MAXLINE);
    bzero(sendBuf, MAXBUF);

    read(connfd, receiveBuf, MAXLINE);


}

/* 
 * open_listenfd - open and return a listening socket on port
 * Returns -1 in case of failure 
 */
int open_listenfd(int port) 
{
    int listenfd, optval=1;
    struct sockaddr_in serveraddr;
  
    /* Create a socket descriptor */
    if ((listenfd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
        return -1;

    /* Eliminates "Address already in use" error from bind. */
    if (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, 
                   (const void *)&optval , sizeof(int)) < 0)
        return -1;

    /* listenfd will be an endpoint for all requests to port
       on any IP address for this host */
    bzero((char *) &serveraddr, sizeof(serveraddr));
    serveraddr.sin_family = AF_INET; 
    serveraddr.sin_addr.s_addr = htonl(INADDR_ANY); 
    serveraddr.sin_port = htons((unsigned short)port); 
    if (bind(listenfd, (struct sockaddr*)&serveraddr, sizeof(serveraddr)) < 0)
        return -1;

    /* Make it a listening socket ready to accept connection requests */
    if (listen(listenfd, LISTENQ) < 0)
        return -1;
    return listenfd;
} /* end open_listenfd */